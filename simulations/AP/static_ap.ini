[General]
network = abcd.simulations.StaticAP
sim-time-limit = 20s
warmup-period = 1.5s

**.vector-recording = true
**.scalar-recording = true
**.bin-recording = true


# Mobility parameters
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.initFromDisplayString = true

# Visualizer configuration
*.visualizer.*.mediumVisualizer.displaySignals = true
*.visualizer.*.mediumVisualizer.displayTransmissions = true
*.visualizer.*.mediumVisualizer.displayReceptions = true

*.visualizer.*.networkRouteVisualizer.displayRoutes = true
*.visualizer.*.networkRouteVisualizer.packetFilter = "*VoIP*"
*.visualizer.*.networkRouteVisualizer.lineColor = "blue"

*.visualizer.*.mobilityVisualizer.displayVelocities = true
*.visualizer.*.mobilityVisualizer.displayMovementTrails = true

*.visualizer.*.interfaceTableVisualizer.displayInterfaceTables = true
*.visualizer.*.ieee80211Visualizer.displayAssociations = true
*.visualizer.mediumVisualizer.displaySignals = true
# Enable IEEE 802.11 visualization
*.radioMedium.backgroundNoise.power = -100dBm

# Access Point Radio Configuration
*.accessPoint.wlan[0].radio.transmitter.power = 4mW        # Transmission power
*.ccessPoint.wlan[0].radio.transmitter.communicationRange = 200m  # Maximum range
*.accessPoint.wlan[0].radio.receiver.sensitivity = -95dBm   # Receiver sensitivity



num-rngs = 2
**.internet.ipv4Delayer.rng-0 = 1

**.internetCloud.ipv4Delayer.config = xmldoc("./internet.xml")

 


**.numUe = ${numUEs=1}

[Config VoIP_AP_QoS]
result-dir = results/VoIP_AP_QoS
# Detailed VoIP statistics recording
**.client[*].app[*].*.endToEndDelay:vector.vector-recording = true
**.client[*].app[*].*.jitter:vector.vector-recording = true
**.client[*].app[*].*.packetLoss:vector.vector-recording = true
**.server.app[*].*.endToEndDelay:vector.vector-recording = true
**.server.app[*].*.jitter:vector.vector-recording = true
**.server.app[*].*.packetLoss:vector.vector-recording = true

# Specific VoIP metrics
**.VoIPReceiver.endToEndDelay:vector.vector-recording = true
**.VoIPReceiver.jitter:vector.vector-recording = true

**.numclient = ${numclients=1}

# Client mobility
*.client[*].mobility.initFromDisplayString = true
*.client[*].mobility.initialX = uniform(500m,500m)
*.client[*].mobility.initialY = uniform(500m,500m)
*.client[*].mobility.initialZ = 0m
*.client[*].mobility.speed = 0mps
*.client[*].mobility.typename = "StationaryMobility"

# Applications
*.client[*].numApps = 3  
*.server.numApps = 3

# Background UDP traffic (client to server)
*.client[*].app[2].typename = "UdpBasicApp"
*.client[*].app[2].destAddresses = "server"
*.client[*].app[2].destPort = 5000
*.client[*].app[2].messageLength = 1024B
*.client[*].app[2].sendInterval = 0.01s  # High frequency
*.client[*].app[2].startTime = uniform(0s, 0.1s)

# Background UDP sink on server
*.server.app[2].typename = "UdpSink"
*.server.app[2].localPort = 5000

# Uplink VoIP
*.server.app[0].typename = "VoIPReceiver"
*.server.app[0].localPort = 4000

*.client[*].app[1].typename = "VoIPSender"
*.clinte[*].app[1].qosClass = "Voice"  # Maps to AC_VO
*.clinte[*].app[1].dscpMark = 46       # EF PHB
*.clinte[*].app[1].tos = 0xE0          # Priority setting
*.client[*].app[1].PacketSize = 320
*.client[*].app[1].destAddress = "server"
*.client[*].app[1].destPort = 4000
*.client[*].app[1].localPort = 4088
*.client[*].app[1].sendInterval = 0.1ms
*.client[*].app[1].startTime = uniform(0s,0.02s)

# Downlink VoIP
*.client[*].app[0].typename = "VoIPReceiver"
*.client[*].app[0].localPort = 3000

*.server.app[1].typename = "VoIPSender"
*.server.app[1].PacketSize = 320
*.server.app[1].qosClass = "Voice"
*.server.app[1].dscpMark = 46
*.server.app[1].tos = 0xE0
*.server.app[1].destAddress = "client"
*.server.app[1].destPort = 3000
*.server.app[1].localPort = 3088
*.server.app[1].sendInterval = 0.1ms
*.server.app[1].startTime = uniform(0s,0.02s)

# DiffServ Configuration
*.wifiRouter.ipv4.config.filters = xml("<filters>" + 
    "<filter name='VoIP' proto='udp' destPort='3000,4000'/>" +
    "</filters>")

# Configure DiffServ queuing
*.wifiRouter.queue.typename = "DiffservQueue"
*.wifiRouter.queue.packetCapacity = 100
*.wifiRouter.queue.bufferSize = 1000

# Define traffic classes
*.wifiRouter.queue.numQueues = 4
*.wifiRouter.queue.classifier.typename = "DiffservClassifier"

# Queue weights for Weighted Round Robin
*.wifiRouter.queue.scheduler.typename = "WrrScheduler"
*.wifiRouter.queue.scheduler.weights = "4 3 2 1"

# Set DSCP marks for different traffic
*.app[*].dscpMark = 46  # EF (Expedited Forwarding) for VoIP

# Queue parameters per traffic class
*.wifiRouter.queue.queue[0].typename = "DropTailQueue"  # EF queue
*.wifiRouter.queue.queue[0].packetCapacity = 100
*.wifiRouter.queue.queue[1].typename = "REDQueue"       # AF queue
*.wifiRouter.queue.queue[1].packetCapacity = 200
*.wifiRouter.queue.queue[2].typename = "REDQueue"       # AF queue
*.wifiRouter.queue.queue[2].packetCapacity = 300
*.wifiRouter.queue.queue[3].typename = "DropTailQueue"  # BE queue
*.wifiRouter.queue.queue[3].packetCapacity = 400

# WiFi QoS Configuration
*.accessPoint.wlan[0].mac.typename = "Ieee80211Mac"
*.accessPoint.wlan[0].mac.qosStation = true
*.accessPoint.wlan[0].mac.ctrl.typename = "Ieee80211MacCtrl"
*.accessPoint.wlan[0].mac.dcf.channelAccess.typename = "EdcaChannelAccess"

# Same for UE
*.client[*].wlan[0].mac.typename = "Ieee80211Mac"
*.client[*].wlan[0].mac.qosStation = true
*.client[*].wlan[0].mac.ctrl.typename = "Ieee80211MacCtrl"
*.client[*].wlan[0].mac.dcf.channelAccess.typename = "EdcaChannelAccess"

# EDCA Parameters
*.*.wlan[0].mac.dcf.edca.edcaf[0].priority = 6  # AC_VO
*.*.wlan[0].mac.dcf.edca.edcaf[0].aifsn = 2
*.*.wlan[0].mac.dcf.edca.edcaf[0].cwMin = 7
*.*.wlan[0].mac.dcf.edca.edcaf[0].cwMax = 15
*.*.wlan[0].mac.dcf.edca.edcaf[0].txopLimit = 3264us

#*.wlan[0].mac.dcf.edca.edcaf[1].priority = 4  # AC_VI
#*.wlan[0].mac.dcf.edca.edcaf[1].aifsn = 2
#*.wlan[0].mac.dcf.edca.edcaf[1].cwMin = 15
#*.wlan[0].mac.dcf.edca.edcaf[1].cwMax = 31
#*.wlan[0].mac.dcf.edca.edcaf[1].txopLimit = 6016us

#*.wlan[0].mac.dcf.edca.edcaf[2].priority = 0  # AC_BE
#*.wlan[0].mac.dcf.edca.edcaf[2].aifsn = 3
#*.wlan[0].mac.dcf.edca.edcaf[2].cwMin = 31
#*.wlan[0].mac.dcf.edca.edcaf[2].cwMax = 1023
#*.wlan[0].mac.dcf.edca.edcaf[2].txopLimit = 0us

#*.wlan[0].mac.dcf.edca.edcaf[3].priority = 1  # AC_BK
#*.wlan[0].mac.dcf.edca.edcaf[3].aifsn = 7
#*.wlan[0].mac.dcf.edca.edcaf[3].cwMin = 31
#*.wlan[0].mac.dcf.edca.edcaf[3].cwMax = 1023
#*.wlan[0].mac.dcf.edca.edcaf[3].txopLimit = 0us



# QoS Performance Measurement
*.wifiRouter.eth[*].queue.*.packetDropped.scalar-recording = true
*.mac.*.queueingTime.scalar-recording = true
*.mac.*.txPk.scalar-recording = true
*.mac.*.rxPkOk.scalar-recording = true

# Specific VoIP metrics
*.app[*].playoutDelay.scalar-recording = true
*.app[*].playoutLoss.scalar-recording = true
*.app[*].mosScore.scalar-recording = true


[Config VoIP_AP_NoQoS]
result-dir = results/VoIP_AP_NoQoS
# Detailed VoIP statistics recording
**.client[*].app[*].*.endToEndDelay:vector.vector-recording = true
**.client[*].app[*].*.jitter:vector.vector-recording = true
**.client[*].app[*].*.packetLoss:vector.vector-recording = true
**.server.app[*].*.endToEndDelay:vector.vector-recording = true
**.server.app[*].*.jitter:vector.vector-recording = true
**.server.app[*].*.packetLoss:vector.vector-recording = true

# Specific VoIP metrics
**.VoIPReceiver.endToEndDelay:vector.vector-recording = true
**.VoIPReceiver.jitter:vector.vector-recording = true

**.numclient = ${numclients=1}

# Client mobility
*.client[*].mobility.initFromDisplayString = true
*.client[*].mobility.initialX = uniform(500m,500m)
*.client[*].mobility.initialY = uniform(500m,500m)
*.client[*].mobility.initialZ = 0m
*.client[*].mobility.speed = 0mps
*.client[*].mobility.typename = "StationaryMobility"

# VoIP Applications

*.client[*].numApps = 3  # Add one more app
*.server.numApps = 3

# Background UDP traffic (client to server)
*.client[*].app[2].typename = "UdpBasicApp"
*.client[*].app[2].destAddresses = "server"
*.client[*].app[2].destPort = 5000
*.client[*].app[2].messageLength = 1024B
*.client[*].app[2].sendInterval = 0.1s  # High frequency
*.client[*].app[2].startTime = uniform(0s, 0.1s)

# Background UDP sink on server
*.server.app[2].typename = "UdpSink"
*.server.app[2].localPort = 5000
# Uplink VoIP
*.server.app[0].typename = "VoIPReceiver"
*.server.app[0].localPort = 4000

*.client[*].app[1].typename = "VoIPSender"
*.client[*].app[1].PacketSize = 320
*.client[*].app[1].destAddress = "server"
*.client[*].app[1].destPort = 4000
*.client[*].app[1].localPort = 4088
*.client[*].app[1].sendInterval = 0.1ms
*.client[*].app[1].startTime = uniform(0s,0.02s)

# Downlink VoIP
*.client[*].app[0].typename = "VoIPReceiver"
*.client[*].app[0].localPort = 3000

*.server.app[1].typename = "VoIPSender"
*.server.app[1].PacketSize = 320
*.server.app[1].destAddress = "client"
*.server.app[1].destPort = 3000
*.server.app[1].localPort = 3088
*.server.app[1].sendInterval = 0.1ms
*.server.app[1].startTime = uniform(0s,0.02s)

# Add delay and packet loss to router interfaces
*.wifiRouter.queue.typename = "DropTailQueue"
*.wifiRouter.queue.packetCapacity = 100  # Smaller buffer
*.wifiRouter.queue.frameCapacity = 100

# Add random packet dropping
*.wifiRouter.queue.packetDropperFunction = "uniform(0, 1) < 0.02"  # 2% drop rate

# QoS Performance Measurement
*.wifiRouter.queue.*.packetDropped.scalar-recording = true
*.mac.*.queueingTime.scalar-recording = true
*.mac.*.txPk.scalar-recording = true
*.mac.*.rxPkOk.scalar-recording = true

# Specific VoIP metrics
*.app[*].playoutDelay.scalar-recording = true
*.app[*].playoutLoss.scalar-recording = true
*.app[*].mosScore.scalar-recording = true