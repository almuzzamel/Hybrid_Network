//
// Generated file, do not edit! Created by opp_msgtool 6.0 from handover/CustomVoipPacket.msg.
//

#ifndef __INET_CUSTOMVOIPPACKET_M_H
#define __INET_CUSTOMVOIPPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace inet {

class CustomVoipPacket;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace inet {

/**
 * Class generated from <tt>handover/CustomVoipPacket.msg:17</tt> by opp_msgtool.
 * <pre>
 * //
 * // Represents a voice packet used by SimpleVoipSender / SimpleVoipReceiver
 * //
 * class CustomVoipPacket extends FieldsChunk
 * {
 *     uint16_t totalLengthField;         // length of total SimpleVoipPacket in bytes
 *     unsigned int talkspurtID;          // identifies the talkspurt
 *     unsigned int talkspurtNumPackets;  // number of all packets of current talkspurt
 *     unsigned int packetID;             // 0..talkspurtNumPackets-1
 *     simtime_t voipTimestamp;            // "mouth" timestamp of begin of voice in this packet
 *     simtime_t voiceDuration;            // duration of voice in this packet
 *     // Additional fields needed by VoIPWithHandover.cc
 *     unsigned int seqNum;              // sequence number for the packet
 *     simtime_t sendTime;               // time when packet was sent
 *     unsigned int sampleBits;          // sample bits for audio
 *     unsigned int sampleRate;          // sample rate for audio
 *     unsigned int transmitBitrate;     // transmission bitrate
 *     unsigned int retransmissionCount; // number of retransmissions
 * }
 * </pre>
 */
class CustomVoipPacket : public ::inet::FieldsChunk
{
  protected:
    uint16_t totalLengthField = 0;
    unsigned int talkspurtID = 0;
    unsigned int talkspurtNumPackets = 0;
    unsigned int packetID = 0;
    ::omnetpp::simtime_t voipTimestamp = SIMTIME_ZERO;
    ::omnetpp::simtime_t voiceDuration = SIMTIME_ZERO;
    unsigned int seqNum = 0;
    ::omnetpp::simtime_t sendTime = SIMTIME_ZERO;
    unsigned int sampleBits = 0;
    unsigned int sampleRate = 0;
    unsigned int transmitBitrate = 0;
    unsigned int retransmissionCount = 0;

  private:
    void copy(const CustomVoipPacket& other);

  protected:
    bool operator==(const CustomVoipPacket&) = delete;

  public:
    CustomVoipPacket();
    CustomVoipPacket(const CustomVoipPacket& other);
    virtual ~CustomVoipPacket();
    CustomVoipPacket& operator=(const CustomVoipPacket& other);
    virtual CustomVoipPacket *dup() const override {return new CustomVoipPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint16_t getTotalLengthField() const;
    virtual void setTotalLengthField(uint16_t totalLengthField);

    virtual unsigned int getTalkspurtID() const;
    virtual void setTalkspurtID(unsigned int talkspurtID);

    virtual unsigned int getTalkspurtNumPackets() const;
    virtual void setTalkspurtNumPackets(unsigned int talkspurtNumPackets);

    virtual unsigned int getPacketID() const;
    virtual void setPacketID(unsigned int packetID);

    virtual ::omnetpp::simtime_t getVoipTimestamp() const;
    virtual void setVoipTimestamp(::omnetpp::simtime_t voipTimestamp);

    virtual ::omnetpp::simtime_t getVoiceDuration() const;
    virtual void setVoiceDuration(::omnetpp::simtime_t voiceDuration);

    virtual unsigned int getSeqNum() const;
    virtual void setSeqNum(unsigned int seqNum);

    virtual ::omnetpp::simtime_t getSendTime() const;
    virtual void setSendTime(::omnetpp::simtime_t sendTime);

    virtual unsigned int getSampleBits() const;
    virtual void setSampleBits(unsigned int sampleBits);

    virtual unsigned int getSampleRate() const;
    virtual void setSampleRate(unsigned int sampleRate);

    virtual unsigned int getTransmitBitrate() const;
    virtual void setTransmitBitrate(unsigned int transmitBitrate);

    virtual unsigned int getRetransmissionCount() const;
    virtual void setRetransmissionCount(unsigned int retransmissionCount);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CustomVoipPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CustomVoipPacket& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::CustomVoipPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::CustomVoipPacket*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_CUSTOMVOIPPACKET_M_H

